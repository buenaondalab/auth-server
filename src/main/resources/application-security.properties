spring.security.user.name=${OAUTH_USER:test}
spring.security.user.password=${OAUTH_PASSWORD:password}

#garden.oauth2.clients[0]=gateway

#garden-ui client TODO: garden-gateway as both resource server and client ???
garden.oauth2.client-id=gateway
#spring.security.oauth2.authorizationserver.client.gateway.registration.client-id=gateway
garden.oauth2.client-secret={noop}${OAUTH_GATEWAY_PASSWORD:password}
#spring.security.oauth2.authorizationserver.client.gateway.registration.client-secret={noop}${OAUTH_GATEWAY_PASSWORD:password}
#spring.security.oauth2.authorizationserver.client.gateway.registration.client-authentication-methods[0]=client_secret_basic
#spring.security.oauth2.authorizationserver.client.gateway.registration.authorization-grant-types[0]=authorization_code
#spring.security.oauth2.authorizationserver.client.gateway.registration.authorization-grant-types[1]=refresh_token
# spring.security.oauth2.authorizationserver.client.gateway.registration.redirect-uris[0]=${garden.services.base-uri}${garden.oauth2.clients[0]}/login/oauth2/code/${garden.oauth2.clients[0]}
# spring.security.oauth2.authorizationserver.client.gateway.registration.scopes[0]=openid
# spring.security.oauth2.authorizationserver.client.gateway.registration.scopes[1]=profile
# spring.security.oauth2.authorizationserver.client.gateway.registration.scopes[2]=catalog.write
# spring.security.oauth2.authorizationserver.client.gateway.registration.scopes[3]=catalog.read
#spring.security.oauth2.authorizationserver.client.gateway.require-authorization-consent=true